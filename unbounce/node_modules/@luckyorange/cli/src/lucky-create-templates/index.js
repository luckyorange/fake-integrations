const fs = require('fs')

module.exports = () => {
  return {
    /**
     * Quickly scaffold a new integration package.
     */
    integration: {
      templateType: 'project',
      inputDirectory: './integration',
      features: [
        { name: 'Backend', value: 'backend', hint: 'Add a microservice for Oauth, server-side events, etc.' },
        { name: 'Core', value: 'core', hint: 'Add a browser script for interacting with the website.' },
        { name: 'Privacy', value: 'privacy', hint: 'Add a privacy script to adhere to 3rd party privacy guidelines'}
      ],
      data (options) {
        return {
          name: options.name,
          description: options.description,
          features: options.features
        }
      },
      scripts: [
        {
          label: 'Installing root dependencies',
          value: 'npm i'
        },
        {
          label: 'Doing the needful',
          value: 'npx lucky build'
        },
        {
          type: 'function',
          label: 'Removing unused subpackages',
          value ({ cwd, data }) {
            if (!data.features.backend) fs.rmSync(`${cwd}/packages/backend`, { force: true, recursive: true })
            if (!data.features.core) fs.rmSync(`${cwd}/packages/core`, { force: true, recursive: true })
            if (!data.features.privacy) fs.rmSync(`${cwd}/packages/privacy`, { force: true, recursive: true })
          }
        }
      ]
    },

    /**
     * API Microservice template used with resource-api.
     */
    microservice: {
      templateType: 'project',
      inputDirectory: './microservice',
      defaultFeatures: [
        'Resource API'
      ],
      features: [
        { name: 'Admin Configuration', value: 'admin', hint: 'Choose when creating an admin service.' },
        { name: 'Resource API', value: 'resources', hint: 'Easily build out CRUD APIs.' }
      ],
      data (options) {
        return {
          name: options.name,
          description: options.description,
          features: options.features,
          cluster: options.cluster,
          clusterStaging: options.clusterStaging,
          namespace: options.features.admin ? 'admin' : 'default'
        }
      },
      scripts: [
        {
          label: 'Installing dependencies',
          value: 'npm i'
        },
        {
          label: 'Doing the needful',
          value: 'npx lucky build'
        }
      ]
    },

    /**
     * Report element template for use with Meeting Ready Reports® in the app repo.
     */
    'app-report-element': {
      templateType: 'files',
      inputDirectory: './app-report-element',
      data (options) {
        return {
          name: options.name
        }
      }
    },

    /**
     * Report element template for use with Meeting Ready Reports® in the toolkit repo.
     */
    'toolkit-report-element': {
      templateType: 'files',
      inputDirectory: './toolkit-report-element',
      data (options) {
        return {
          name: options.name,
          title: '{{title}}'
        }
      }
    }
  }
}
