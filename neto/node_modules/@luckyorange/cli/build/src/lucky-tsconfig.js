"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const listr_1 = __importDefault(require("listr"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const update_packagejson_1 = __importDefault(require("../utils/update-packagejson"));
const add_globals_1 = __importDefault(require("../utils/add-globals"));
const copyTemplateDirectory = require("../utils/copy-template-directory");
function tsconfig() {
    return __awaiter(this, void 0, void 0, function* () {
        const program = new commander_1.Command();
        program
            .version('1.0.0')
            .option('-i, --integration', 'Configure TypeScript for an integration')
            .option('-m --microservice', 'Configure TypeScript for a microservice')
            .option('-p --package', 'Configure TypeScript for a package');
        const globals = (0, add_globals_1.default)(program);
        const config = globals.config;
        const options = program.opts();
        if (options.integration && (!config.build || !config.build.resources)) {
            process.exit();
        }
        let integrationOptions;
        if (options.integration) {
            integrationOptions = config.build.resources.find((r) => r.name === 'integration-buddy-v2').options;
        }
        const tasks = [
            {
                title: 'Updating package.json',
                task: () => __awaiter(this, void 0, void 0, function* () {
                    const tsDevDependencies = {
                        '@luckyorange/cli': '^4.0.5',
                        '@typescript-eslint/eslint-plugin': '^5.60.1',
                        '@typescript-eslint/parser': '^5.60.1',
                        typescript: '^5.0.4'
                    };
                    const serverTsDevDependencies = {
                        '@types/microrouter': '^3.1.3',
                        '@types/node': '^18.15.11'
                    };
                    const packageTsDevDependencies = {
                        '@types/node': '^18.15.11'
                    };
                    if (options.integration) {
                        (0, update_packagejson_1.default)('package.json', { devDependencies: tsDevDependencies });
                        Object.entries(integrationOptions).filter(([packageName, value]) => value === true).forEach(([packageName, value]) => {
                            const path = `packages/${packageName}/package.json`;
                            switch (packageName) {
                                case 'core':
                                    break;
                                case 'privacy':
                                    break;
                                case 'backend':
                                    (0, update_packagejson_1.default)(path, {
                                        devDependencies: serverTsDevDependencies,
                                        main: 'build/index.js',
                                        scripts: {
                                            compile: 'tsc --watch'
                                        }
                                    });
                                    break;
                            }
                        });
                    }
                    if (options.microservice) {
                        const path = 'package.json';
                        (0, update_packagejson_1.default)(path, {
                            devDependencies: Object.assign(Object.assign({}, tsDevDependencies), serverTsDevDependencies),
                            main: 'build/index.js',
                            scripts: {
                                compile: 'tsc --watch'
                            }
                        });
                    }
                    if (options.package) {
                        const path = 'package.json';
                        (0, update_packagejson_1.default)(path, {
                            devDependencies: Object.assign(Object.assign({}, tsDevDependencies), packageTsDevDependencies),
                            main: 'build/index.js',
                            scripts: {
                                compile: 'tsc --watch'
                            }
                        });
                    }
                })
            },
            {
                title: 'deleting old files',
                task: () => __awaiter(this, void 0, void 0, function* () {
                    let pathsToDelete = [
                        '.eslintrc'
                    ];
                    if (options.integration) {
                        Object.entries(integrationOptions).filter(([packageName, value]) => value === true).forEach(([packageName, value]) => {
                            switch (packageName) {
                                case 'core':
                                case 'privacy':
                                    pathsToDelete = [
                                        ...pathsToDelete,
                                        `packages/${packageName}/vite.config.js`,
                                        `packages/${packageName}/.eslintrc`,
                                        `packages/${packageName}/.eslintrc.json`
                                    ];
                                    break;
                                case 'backend':
                                    pathsToDelete = [
                                        ...pathsToDelete,
                                        `packages/${packageName}/.eslintrc`,
                                        `packages/${packageName}/.eslintrc.json`
                                    ];
                                    break;
                            }
                        });
                    }
                    pathsToDelete.forEach((path) => {
                        if (fs_1.default.existsSync(path)) {
                            fs_1.default.unlinkSync(path);
                        }
                    });
                })
            },
            {
                title: 'Copying config files',
                task: () => __awaiter(this, void 0, void 0, function* () {
                    if (options.integration) {
                        const copyFrom = path_1.default.resolve(__dirname, './lucky-tsconfig-templates/integration/.eslintrc.json');
                        const copyTo = path_1.default.resolve('.eslintrc.json');
                        yield copyTemplateDirectory(copyFrom, copyTo);
                        Object.entries(integrationOptions).filter(([packageName, value]) => value === true).forEach(([packageName, value]) => __awaiter(this, void 0, void 0, function* () {
                            const copyFrom = path_1.default.resolve(__dirname, `./lucky-tsconfig-templates/integration/packages/${packageName}`);
                            const copyTo = path_1.default.resolve(`packages/${packageName}`);
                            yield copyTemplateDirectory(copyFrom, copyTo);
                        }));
                    }
                    if (options.microservice) {
                        const copyFrom = path_1.default.resolve(__dirname, './lucky-tsconfig-templates/microservice');
                        yield copyTemplateDirectory(copyFrom, path_1.default.resolve(''));
                    }
                    if (options.package) {
                        const copyFrom = path_1.default.resolve(__dirname, './lucky-tsconfig-templates/package');
                        yield copyTemplateDirectory(copyFrom, path_1.default.resolve(''));
                    }
                })
            }
        ];
        const runner = new listr_1.default(tasks);
        runner.run();
    });
}
tsconfig();
