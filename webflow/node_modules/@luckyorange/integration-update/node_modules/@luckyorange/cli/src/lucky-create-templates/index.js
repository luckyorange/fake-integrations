const fs = require('fs')

module.exports = () => {
  return {

    /**
     * Quickly scaffold a new integration package.
     */
    integration: {
      templateType: 'project',
      inputDirectory: './integration',
      data ({ name, description }) {
        return {
          name,
          description
        }
      },
      scripts: [
        {
          label: 'Installing node modules in ./core',
          value: 'cd ./core && npm i'
        },
        {
          label: 'Building resources in ./core',
          value: 'cd ./core && lucky build'
        },
        {
          type: 'function',
          label: 'Generating dynamic filenames in ./core',
          value ({ cwd, data: { name } }) {
            fs.renameSync(
              `${cwd}/core/src/main.js`,
              `${cwd}/core/src/${name}.js`
            )
            fs.renameSync(
              `${cwd}/core/cypress/integration/main.test.js`,
              `${cwd}/core/cypress/integration/${name}.test.js`
            )
          }
        },
        {
          label: 'Installing node modules in ./backend',
          value: 'cd ./backend && npm i'
        },
        {
          label: 'Building resources in ./backend',
          value: 'cd ./backend && lucky build'
        },
        {
          type: 'function',
          label: 'Generating dynamic filenames in ./backend',
          value ({ cwd, data: { name } }) {
            fs.renameSync(
              `${cwd}/backend/src/main.js`,
              `${cwd}/backend/src/${name}.js`
            )
          }
        }
      ]
    },

    /**
     * API Microservice template used with resource-api.
     */
    microservice: {
      templateType: 'project',
      inputDirectory: './microservice',
      defaultFeatures: [
        'Resource API'
      ],
      features: [
        { name: 'Admin Configuration', value: 'admin', hint: 'Choose when creating an admin service.' },
        { name: 'Resource API', value: 'resources', hint: 'Easily build out CRUD APIs.' }
      ],
      data (options) {
        return {
          name: options.name,
          description: options.description,
          features: options.features,
          cluster: options.cluster,
          clusterStaging: options.clusterStaging,
          namespace: options.features.admin ? 'admin' : 'default'
        }
      },
      scripts: [
        {
          label: 'Installing dependencies',
          value: 'npm i'
        },
        {
          label: 'Doing the needful',
          value: 'npx lucky build'
        }
      ]
    },

    /**
     * Report element template for use with Meeting Ready Reports® in the app repo.
     */
    'app-report-element': {
      templateType: 'files',
      inputDirectory: './app-report-element',
      data (options) {
        return {
          name: options.name
        }
      }
    },

    /**
     * Report element template for use with Meeting Ready Reports® in the toolkit repo.
     */
    'toolkit-report-element': {
      templateType: 'files',
      inputDirectory: './toolkit-report-element',
      data (options) {
        return {
          name: options.name,
          title: '{{title}}'
        }
      }
    }
  }
}
