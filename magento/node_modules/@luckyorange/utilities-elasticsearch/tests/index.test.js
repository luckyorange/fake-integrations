/* global describe test expect */
const elasticsearch = require('../index')
require('./mock')

describe('utilities-elasticsearch', () => {
  describe('getElassandraClients()', () => {
    describe('when called', () => {
      test('it should return an object with an ES client for each endpoint key', () => {
        const clients = elasticsearch.getElassandraClients()
        expect(clients).toHaveProperty('30')
        expect(clients['30']).toHaveProperty('search', expect.any(Function))
      })
    })
  })

  describe('getElasticsearchClients()', () => {
    describe('when called', () => {
      test('it should return an object with an ES client for each endpoint key', () => {
        const clients = elasticsearch.getElasticsearchClients()
        expect(clients).toHaveProperty('30')
        expect(clients['30']).toHaveProperty('search', expect.any(Function))
      })
    })
  })

  describe('request()', () => {
    describe('when given a properly formatted options object', () => {
      test('it should execute the correct request for search', async () => {
        const options = {
          action: 'search',
          body: {
            where: {
              members: 123
            }
          },
          forever: true,
          index: 'conversations',
          siteId: '29'
        }
        const response = await elasticsearch.request(options)

        expect(response.req).toHaveProperty('headers.x-lucky-site-id', '29')
        expect(response.req).toHaveProperty('headers.x-lucky-forever', true)
        expect(response.req.path).toContain('/conversations/search')
        expect(response.body).toMatchObject(options.body)
      })

      test('it should execute the correct request for lookup', async () => {
        const options = {
          action: 'lookup',
          forever: false,
          index: 'conversations',
          id: 'test-id',
          siteId: '29'
        }
        const response = await elasticsearch.request(options)

        expect(response.req).toHaveProperty('headers.x-lucky-site-id', '29')
        expect(response.req).toHaveProperty('headers.x-lucky-forever', false)
        expect(response.req.path).toContain('/conversations/test-id')
      })
    })

    describe('when given an invalid options', () => {
      test('it should throw an error', () => {
        const options = {
          action: 'notReal',
          siteId: 29
        }

        expect(() => elasticsearch.request(options)).toThrow()
      })
    })
  })
})
