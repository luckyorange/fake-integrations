import { Command } from 'commander'
import Listr from 'listr'
import path from 'path'
import fs from 'fs'

import updatePackageJson from '../utils/update-packagejson'
import addGlobals from '../utils/add-globals'
import copyTemplateDirectory = require('../utils/copy-template-directory')

async function tsconfig () {
  const program = new Command()
  program
    .version('1.0.0')
    .option('-i, --integration', 'Configure TypeScript for an integration')
    .option('-m --microservice', 'Configure TypeScript for a microservice')
    .option('-p --package', 'Configure TypeScript for a package')

  const globals = addGlobals(program)

  const config = globals.config
  const options = program.opts()

  if (options.integration && (!config.build || !config.build.resources)) {
    process.exit()
  }

  let integrationOptions: { core?: boolean, backend?: boolean, privacy?: boolean }
  if (options.integration) {
    integrationOptions = config.build.resources.find((r: any) => r.name === 'integration-buddy-v2').options
  }

  const tasks = [
    {
      title: 'Updating package.json',
      task: async () => {
        const tsDevDependencies = {
          '@luckyorange/cli': '^4.0.5',
          '@typescript-eslint/eslint-plugin': '^5.60.1',
          '@typescript-eslint/parser': '^5.60.1',
          typescript: '^5.0.4'
        }

        const serverTsDevDependencies = {
          '@types/microrouter': '^3.1.3',
          '@types/node': '^18.15.11'
        }

        const packageTsDevDependencies = {
          '@types/node': '^18.15.11'
        }

        if (options.integration) {
          updatePackageJson('package.json', { devDependencies: tsDevDependencies })
          Object.entries(integrationOptions).filter(([packageName, value]) => value === true).forEach(([packageName, value]) => {
            const path = `packages/${packageName}/package.json`
            switch (packageName) {
              case 'core':
                break
              case 'privacy':
                break
              case 'backend':
                updatePackageJson(path, {
                  devDependencies: serverTsDevDependencies,
                  main: 'build/index.js',
                  scripts: {
                    compile: 'tsc --watch'
                  }
                })
                break
            }
          })
        }
        if (options.microservice) {
          const path = 'package.json'
          updatePackageJson(path, {
            devDependencies: { ...tsDevDependencies, ...serverTsDevDependencies },
            main: 'build/index.js',
            scripts: {
              compile: 'tsc --watch'
            }
          })
        }
        if (options.package) {
          const path = 'package.json'
          updatePackageJson(path, {
            devDependencies: { ...tsDevDependencies, ...packageTsDevDependencies },
            main: 'build/index.js',
            scripts: {
              compile: 'tsc --watch'
            }
          })
        }
      }
    },
    {
      title: 'deleting old files',
      task: async () => {
        let pathsToDelete: string[] = [
          '.eslintrc'
        ]
        if (options.integration) {
          Object.entries(integrationOptions).filter(([packageName, value]) => value === true).forEach(([packageName, value]) => {
            switch (packageName) {
              case 'core':
              case 'privacy':
                pathsToDelete = [
                  ...pathsToDelete,
                  `packages/${packageName}/vite.config.js`,
                  `packages/${packageName}/.eslintrc`,
                  `packages/${packageName}/.eslintrc.json`
                ]
                break
              case 'backend':
                pathsToDelete = [
                  ...pathsToDelete,
                  `packages/${packageName}/.eslintrc`,
                  `packages/${packageName}/.eslintrc.json`
                ]
                break
            }
          })
        }

        pathsToDelete.forEach((path) => {
          if (fs.existsSync(path)) {
            fs.unlinkSync(path)
          }
        })
      }
    },
    {
      title: 'Copying config files',
      task: async () => {
        if (options.integration) {
          const copyFrom = path.resolve(__dirname, './lucky-tsconfig-templates/integration/.eslintrc.json')
          const copyTo = path.resolve('.eslintrc.json')
          await copyTemplateDirectory(copyFrom, copyTo)
          Object.entries(integrationOptions).filter(([packageName, value]) => value === true).forEach(async ([packageName, value]) => {
            const copyFrom = path.resolve(__dirname, `./lucky-tsconfig-templates/integration/packages/${packageName}`)
            const copyTo = path.resolve(`packages/${packageName}`)
            await copyTemplateDirectory(copyFrom, copyTo)
          })
        }
        if (options.microservice) {
          const copyFrom = path.resolve(__dirname, './lucky-tsconfig-templates/microservice')
          await copyTemplateDirectory(copyFrom, path.resolve(''))
        }
        if (options.package) {
          const copyFrom = path.resolve(__dirname, './lucky-tsconfig-templates/package')
          await copyTemplateDirectory(copyFrom, path.resolve(''))
        }
      }
    }
  ]

  const runner = new Listr(tasks)

  runner.run()
}

tsconfig()
