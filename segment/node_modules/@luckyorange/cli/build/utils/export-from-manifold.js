"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { SecretManagerServiceClient } = require('@google-cloud/secret-manager');
function start() {
    return __awaiter(this, void 0, void 0, function* () {
        const client = new SecretManagerServiceClient();
        const promises = Object
            .keys(process.env)
            .filter(key => key.startsWith('LO_'))
            .map((key) => __awaiter(this, void 0, void 0, function* () {
            const [secret] = yield client.createSecret({
                parent: 'projects/lucky-orange',
                secretId: key,
                secret: {
                    replication: {
                        automatic: {}
                    }
                }
            });
            const [version] = yield client.addSecretVersion({
                parent: `projects/lucky-orange/secrets/${key}`,
                payload: {
                    data: Buffer.from(process.env[key], 'utf8')
                }
            });
        }));
        return Promise.all(promises);
    });
}
start().then(() => console.log('Done!'));
