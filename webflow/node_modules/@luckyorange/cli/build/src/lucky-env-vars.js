"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const { SecretManagerServiceClient } = require('@google-cloud/secret-manager');
const { program } = require('commander');
program
    .version('1.0.0')
    .option('-F, --project [String]', 'GCP Project')
    .parse(process.argv);
const options = program.opts();
const project = options.project || 'lucky-orange';
const nodeVersion = parseInt(process.version.split('.')[0].substring(1));
const client = new SecretManagerServiceClient({
    fallback: nodeVersion <= 10
});
function listSecrets() {
    return __awaiter(this, void 0, void 0, function* () {
        // Get list of secrets
        const [secrets] = yield client.listSecrets({
            parent: `projects/${project}`
        });
        const env = {};
        // Get latest value for each secret
        const responses = yield Promise.all(secrets.map(secret => {
            return client.accessSecretVersion({
                name: `${secret.name}/versions/latest`
            }).catch(error => {
                if (error.message.includes('DISABLED')) {
                    return null;
                }
                else {
                    throw error;
                }
            });
        }));
        // Add values to env object
        responses
            .filter(version => !!version)
            .forEach(([version], index) => {
            const key = secrets[index].name.split('/').slice(-1)[0];
            env[key] = Buffer.from(version.payload.data).toString();
        });
        return env;
    });
}
listSecrets().then(secrets => {
    for (const [k, v] of Object.entries(secrets)) {
        console.log(`${k}=${v}`);
    }
});
