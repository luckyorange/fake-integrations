"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fs = require('fs-extra');
const handlebars = require('handlebars');
module.exports = (copyFrom, copyTo, data) => {
    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const file = yield fs.readFile(copyFrom);
            const template = handlebars.compile(file.toString());
            const newFile = template(data);
            // Parse mustaches in filenames
            const mustaches = copyTo.match(/{{\s*[\w\.]+\s*}}/g);
            if (mustaches) {
                mustaches
                    .filter(mustache => data[mustache.substring(2, mustache.length - 2)])
                    .forEach(mustache => {
                    copyTo = copyTo.replace(mustache, data[mustache.substring(2, mustache.length - 2)]);
                });
            }
            resolve(yield fs.outputFile(copyTo, newFile));
        }
        catch (e) {
            reject(e);
        }
    }));
};
