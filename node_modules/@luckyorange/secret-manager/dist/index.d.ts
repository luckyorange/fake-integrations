type LuckyProject = 'lucky-orange' | 'lucky-orange-staging';
interface SecretManagerOptions {
    initialCache?: Record<string, unknown>;
    initializeGCP?: boolean;
    gcpProject: LuckyProject;
    debugMode?: boolean;
    instanceId?: number;
}
/**
 * A singleton class that manages secrets and global variables across the application.
 */
declare class SecretManager {
    private static instance;
    private readonly cache;
    private smClient;
    private readonly loProject;
    private readonly instanceId;
    private readonly debugMode;
    /**
     * Creates/returns an instance of the SecretManager class.
     *
     * NOTE: if an instance of SecretManager already exists, this method will return that instance instead of creating a new one. All options will be ignored.
     * @param [options={ initialCache: {}, initializeGCP: true }] The options for the SecretManager instance.
     * @param [options.initialCache={}] The initial cache to use for the SecretManager instance.
     * @param [options.initializeGCP=true] Whether to initialize the GCP secret manager client.
     * @returns An instance of the SecretManager class.
     */
    private constructor();
    static getInstance(options?: SecretManagerOptions): SecretManager;
    /**
     * Initializes a GCP secret manager client. This function can be used to add GCP functionality to an already initialized SecretManager instance.
     * @returns undefined on success, throws an error on failure.
     */
    initGCPSecretManagerClient(): void;
    /**
     * Gets a global variable from the SecretManager cache and optionally from the local process and CCP if not found.
     * @param variableName The name of the variable to retrieve.
     * @param [options={ checkRemote: true, checkLocalProcess: true }] Whether to check the remote (GCP) and local process for the variable if not found in the cache.
     * @returns A promise that resolves to the variable value or undefined if the variable is not found.
     */
    getVar<T = string>(variableName: string, options?: {
        checkRemote: boolean;
        checkLocalProcess: boolean;
        addToCache: boolean;
    }): Promise<T | string | undefined>;
    /**
     * Sets a global variable in the SecretManager cache.
     * @param variableName name of the global variable to set
     * @param value value to set the global variable to
     * @param [overwrite=true] Whether or not to overwrite the variable if it already exists in the cache.
     * @returns The value of the variable that was set. Returns undefined if the variable already exists and overwrite is false.
     */
    setVar<T = unknown>(variableName: string, value: T, overwrite?: boolean): T | undefined;
    getCache(): Record<string, unknown>;
    getInstanceId(): number;
}

export { SecretManager as GlobalManager, SecretManager, SecretManager as default };
