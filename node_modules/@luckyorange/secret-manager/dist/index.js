import { SecretManagerServiceClient } from '@google-cloud/secret-manager';

/**
 * A singleton class that manages secrets and global variables across the application.
 */
class SecretManager {
    static instance;
    cache;
    smClient;
    loProject;
    instanceId;
    debugMode;
    /**
     * Creates/returns an instance of the SecretManager class.
     *
     * NOTE: if an instance of SecretManager already exists, this method will return that instance instead of creating a new one. All options will be ignored.
     * @param [options={ initialCache: {}, initializeGCP: true }] The options for the SecretManager instance.
     * @param [options.initialCache={}] The initial cache to use for the SecretManager instance.
     * @param [options.initializeGCP=true] Whether to initialize the GCP secret manager client.
     * @returns An instance of the SecretManager class.
     */
    constructor(options = {
        initialCache: {},
        initializeGCP: true,
        gcpProject: process.env.LUCKY_PROJECT ??
            'lucky-orange-staging',
        debugMode: false,
        instanceId: Math.random() * 100,
    }) {
        this.cache = options.initialCache ?? {};
        this.loProject = options.gcpProject;
        this.instanceId = options.instanceId ?? Math.random() * 100;
        this.debugMode = options.debugMode ?? false;
        const initializeGCP = options.initializeGCP ?? true;
        if (initializeGCP) {
            this.initGCPSecretManagerClient();
        }
        if (options.debugMode) {
            console.log('Debug mode enabled');
            console.log('instanceId', this.instanceId);
            console.log('process.env', process.env);
        }
    }
    static getInstance(options) {
        if (!SecretManager.instance) {
            SecretManager.instance = new SecretManager(options);
        }
        return SecretManager.instance;
    }
    /**
     * Initializes a GCP secret manager client. This function can be used to add GCP functionality to an already initialized SecretManager instance.
     * @returns undefined on success, throws an error on failure.
     */
    initGCPSecretManagerClient() {
        try {
            this.smClient = new SecretManagerServiceClient();
        }
        catch (error) {
            console.error('error initializing GCP secret manager client', error);
            throw error;
        }
    }
    /**
     * Gets a global variable from the SecretManager cache and optionally from the local process and CCP if not found.
     * @param variableName The name of the variable to retrieve.
     * @param [options={ checkRemote: true, checkLocalProcess: true }] Whether to check the remote (GCP) and local process for the variable if not found in the cache.
     * @returns A promise that resolves to the variable value or undefined if the variable is not found.
     */
    async getVar(variableName, options = { checkRemote: true, checkLocalProcess: true, addToCache: true }) {
        if (this.debugMode) {
            console.log('debug mode enabled');
            console.log('getting variable:', variableName);
            console.log('instance id:', this.instanceId);
            console.log('current cache:', this.cache);
        }
        const cached = this.cache[variableName];
        console.log('cached:', cached);
        if (cached) {
            console.log('returning cached value', cached);
            return cached;
        }
        if (options.checkLocalProcess) {
            const local = process.env[variableName];
            console.log('local:', local);
            if (local) {
                if (options.addToCache) {
                    this.setVar(variableName, local);
                }
                console.log('returning local value');
                return local;
            }
        }
        if (options.checkRemote && this.smClient) {
            try {
                const [accessResponse] = await this.smClient.accessSecretVersion({
                    name: `projects/${this.loProject}/secrets/${variableName}/versions/latest`,
                });
                const secretValue = accessResponse.payload?.data?.toString();
                if (secretValue) {
                    if (options.addToCache) {
                        this.setVar(variableName, secretValue);
                    }
                    return secretValue;
                }
            }
            catch (error) {
                console.warn(`${variableName} was not found in gcp secret manager`);
            }
        }
        return;
    }
    /**
     * Sets a global variable in the SecretManager cache.
     * @param variableName name of the global variable to set
     * @param value value to set the global variable to
     * @param [overwrite=true] Whether or not to overwrite the variable if it already exists in the cache.
     * @returns The value of the variable that was set. Returns undefined if the variable already exists and overwrite is false.
     */
    setVar(variableName, value, overwrite = true) {
        if (!overwrite && this.cache[variableName]) {
            console.warn('Variable already exists');
            return;
        }
        this.cache[variableName] = value;
        return value;
    }
    getCache() {
        return this.cache;
    }
    getInstanceId() {
        return this.instanceId;
    }
}

export { SecretManager as GlobalManager, SecretManager, SecretManager as default };
