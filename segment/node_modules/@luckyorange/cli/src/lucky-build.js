#!/usr/bin/env node

const { program } = require('commander')
const Listr = require('listr')
const execa = require('execa')
const path = require('path')

const addGlobals = require('../utils/add-globals')
const copyTemplate = require('../utils/copy-template')
const upgradeScripts = require('../utils/upgrade-scripts')

async function build () {
  program
    .version('1.0.0')

  const globals = addGlobals(program)

  // Process options
  const config = globals.config

  // Ensure the config is set properly
  if (!config.build || !config.build.resources) {
    process.exit()
  }

  // Get templates
  const templates = await require('./lucky-build-templates')()

  // Add default templates
  Object.entries(templates)
    .filter(t => {
      return t[1].default && !config.build.resources.find(r => r === t[0] || r.name === t[0])
    })
    .forEach(t => config.build.resources.push(t[0]))

  const tasks = config.build.resources
    .map(resource => typeof resource === 'string' ? { name: resource } : resource)
    .filter(resource => templates[resource.name])
    .map(resource => {
      let template = templates[resource.name]
      template = Array.isArray(template) ? template : [template]
      const options = resource.options || {}
      const outputDirectory = resource.outputDirectory || ''

      return {
        title: `Running build step: ${resource.name} ${template[0].default ? '[default]' : ''}`,
        task: async () => {
          for (const file of template) {
            const data = typeof file.data === 'function' ? file.data(options) : file.data || {}
            const copyFrom = path.resolve(__dirname, './lucky-build-templates', file.input)
            await copyTemplate(copyFrom, path.resolve(outputDirectory, file.output), data)
          }
        }
      }
    })

  // Handle any necessary upgrades
  upgradeScripts
    .filter(script => script.isNeeded())
    .forEach(script => tasks.push({
      title: `Performing upgrade: ${script.title}`,
      task: () => {
        return script.action()
      }
    }))

  const runner = new Listr(tasks)
  runner.run().then(async () => {
    await execa('git add .', { shell: true })
  }).catch(() => {})
}

build()
