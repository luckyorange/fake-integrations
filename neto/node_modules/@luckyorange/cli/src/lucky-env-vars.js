const { SecretManagerServiceClient } = require('@google-cloud/secret-manager')
const { program } = require('commander')

program
  .version('1.0.0')
  .option('-F, --project [String]', 'GCP Project')
  .parse(process.argv)

const options = program.opts()
const project = options.project || 'lucky-orange'

const nodeVersion = parseInt(process.version.split('.')[0].substring(1))
const client = new SecretManagerServiceClient({
  fallback: nodeVersion <= 10
})

async function listSecrets () {
  // Get list of secrets
  const [secrets] = await client.listSecrets({
    parent: `projects/${project}`
  })

  const env = {}

  // Get latest value for each secret
  const responses = await Promise.all(secrets.map(secret => {
    return client.accessSecretVersion({
      name: `${secret.name}/versions/latest`
    }).catch(error => {
      if (error.message.includes('DISABLED')) {
        return null
      } else {
        throw error
      }
    })
  }))

  // Add values to env object
  responses
    .filter(version => !!version)
    .forEach(([version], index) => {
      const key = secrets[index].name.split('/').slice(-1)[0]
      env[key] = Buffer.from(version.payload.data).toString()
    })

  return env
}

listSecrets().then(secrets => {
  for (const [k, v] of Object.entries(secrets)) {
    console.log(`${k}=${v}`)
  }
})
