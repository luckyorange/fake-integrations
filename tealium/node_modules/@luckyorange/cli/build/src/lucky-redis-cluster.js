#!/usr/bin/env node
"use strict";
const { program } = require('commander');
const fs = require('fs-extra');
const path = require('path');
const chalk = require('chalk');
program
    .version('1.0.0')
    .option('-T, --total-pods [Integer]', 'Total number of pods', parseInt)
    .option('-C, --pod-cpu [Float]', 'Pod CPU limit', parseFloat)
    .option('-M, --pod-mem [String]', 'Pod memory limit (e.g. 128Mi)')
    .option('-N, --pod-name [String]', 'Pod name prefix (e.g. redis)')
    .option('-F, --file [String]', 'Output file path')
    .parse(process.argv);
const options = program.opts();
const totalPods = options.totalPods || 1;
const podCpu = options.podCpu || 1;
const podMem = options.podMem || '1Gi';
const podName = options.podName || 'redis';
const outputFile = options.file || 'redis.yaml';
function createCacheYaml(total, cpu, mem, name) {
    const strs = [];
    for (let i = 1; i <= total; i++) {
        // create the service
        let str = podService;
        str = str.replace(/{{i}}/g, i);
        str = str.replace(/{{name}}/g, name);
        strs.push(str);
        // create the deployment
        str = podDeployment;
        str = str.replace(/{{i}}/g, i);
        str = str.replace(/{{cpu}}/g, cpu);
        str = str.replace(/{{mem}}/g, mem);
        str = str.replace(/{{name}}/g, name);
        strs.push(str);
    }
    return strs.join('\n');
}
const podService = `
---
# Redis Service {{i}}
apiVersion: v1
kind: Service
metadata:
  name: {{name}}-{{i}}
  labels:
    app: {{name}}-{{i}}
    cluster: {{name}}
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: {{name}}-{{i}}
    cluster: {{name}}
`;
const podDeployment = `
---
# Redis Deployment {{i}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{name}}-{{i}}
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: {{name}}-{{i}}
      cluster: {{name}}
  template:
    metadata:
      labels:
        app: {{name}}-{{i}}
        cluster: {{name}}
    spec:
      containers:
      - name: master
        image: redis:5
        resources:
          requests:
            cpu: {{cpu}}
            memory: {{mem}}
          limits:
            cpu: {{cpu}}
            memory: {{mem}}
        ports:
        - containerPort: 6379
`;
// Create yaml files
const yaml = createCacheYaml(totalPods, podCpu, podMem, podName);
fs.outputFile(path.join(process.cwd(), outputFile), yaml).then(response => {
    console.log(chalk.green('Redis cluster created successfully!'));
}).catch(error => {
    console.error(chalk.red(error.message));
    process.exit(1);
});
