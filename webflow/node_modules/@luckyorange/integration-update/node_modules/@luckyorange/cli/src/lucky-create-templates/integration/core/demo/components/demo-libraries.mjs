export default {
  model: {
    prop: 'libraryOutput',
    event: 'mockCalled'
  },
  props: [
    'libraries',
    'libraryOutput'
  ],
  data () {
    return {
      activeLibrary: null
    }
  },
  computed: {
    activeLibraryText () {
      return this.activeLibrary
        ? this.activeLibrary
        : 'none'
    }
  },
  methods: {
    getButtonId (libraryName) {
      return `library-${libraryName}`
    },

    removeActiveLibrary () {
      if (this.activeLibrary) {
        const activeLibrary = this.libraries.find(
          library => library.name === this.activeLibrary
        )
        if (activeLibrary.mock.target) {
          delete window[activeLibrary.mock.target.property]
        } else {
          delete window[activeLibrary.mock.property]
        }
      }
    },

    setActiveLibrary (library) {
      this.removeActiveLibrary()

      let targetObject

      if (library.mock.target) {
        window[library.mock.target.property] = library.mock.target.value
        targetObject = window[library.mock.target.property]
      } else {
        targetObject = window
      }

      targetObject[library.mock.property] = (...parameters) => {
        const mockReturn = library.mock.handler.apply(targetObject, parameters)
        this.$emit('mockCalled', {
          name: library.name,
          value: mockReturn
        })
      }
      this.activeLibrary = library.name
    }
  },
  template: `
    <section>
      <h1>Libraries</h1>
      <p>Active library: \{{ activeLibraryText }}</p>
      <ul>
        <li v-for="library in libraries">
          <button
            :id="getButtonId(library.name)"
            @click="setActiveLibrary(library)"
          >\{{ library.name }}</button>
        </li>
      </ul>
    </section>
  `
}
