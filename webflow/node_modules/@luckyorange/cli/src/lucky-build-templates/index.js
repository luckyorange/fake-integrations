const get = require('lodash/get')
const readPkg = require('read-pkg')

module.exports = async () => {
  const pkg = await readPkg()

  return {
    npm: {
      default: true,
      input: 'npmrc',
      output: './.npmrc'
    },
    gitignore: {
      default: true,
      input: 'gitignore',
      output: './.gitignore',
      data (options) {
        return {
          custom: options.custom || []
        }
      }
    },
    readme: {
      input: 'README.md',
      output: './README.md',
      data: {
        name: pkg.name,
        description: pkg.description
      }
    },
    docker: [
      {
        input: 'Dockerfile',
        output: './Dockerfile',
        data (options) {
          return {
            baseImage: get(options, 'baseImage', 'node:18')
          }
        }
      },
      {
        input: '.dockerignore',
        output: './.dockerignore'
      }
    ],
    buddy: {
      input: 'buddy.yml',
      output: './buddy.yml',
      data (options) {
        const opts = {
          name: pkg.name,
          cluster: options.cluster || { name: 'api', zone: 'us-central1-a' },
          clusterStaging: options.clusterStaging || { name: 'api', zone: 'us-central1-c' },
          docs: false || options.docs
        }
        return opts
      }
    },
    'integration-buddy': {
      input: 'integration-buddy.yml',
      output: './buddy.yml',
      data (options) {
        const opts = {
          name: pkg.name,
          cluster: options.cluster || { name: 'api', zone: 'us-central1-a' },
          clusterStaging: options.clusterStaging || { name: 'api', zone: 'us-central1-c' },
          docs: options.docs ?? false,
          backend: options.backend ?? false,
          core: options.core ?? false,
          privacy: options.privacy ?? false
        }
        return opts
      }
    },
    'integration-buddy-v2': {
      input: 'integration-buddy-v2.yml',
      output: './buddy.yml',
      data (options) {
        const opts = {
          name: pkg.name,
          cluster: options.cluster || { name: 'api', zone: 'us-central1-a' },
          clusterStaging: options.clusterStaging || { name: 'api', zone: 'us-central1-c' },
          docs: options.docs ?? false,
          backend: options.backend ?? false,
          core: options.core ?? false,
          privacy: options.privacy ?? false
        }
        return opts
      }
    },
    'jest-microservice': {
      input: 'jest-microservice.js',
      output: './jest.config.js'
    },
    kubernetes: [
      {
        input: 'kubernetes.yaml',
        output: './dist/kubernetes/prod.yaml',
        data (options) {
          return {
            autoscale: true,
            auth: JSON.stringify(options.auth),
            cdn: get(options, 'cdn', false),
            googleApplicationCredentials: process.env.LO_GOOGLE_CREDENTIALS,
            livenessProbe: get(options, 'livenessProbe', true),
            namespace: options.namespace || 'default',
            luckyProject: 'lucky-orange',
            memoryLimits: options.memoryLimits || '1Gi',
            name: getPodName(pkg, options.name),
            noIstio: options.noIstio,
            public: options.public === undefined ? true : options.public,
            readinessProbe: get(options, 'readinessProbe', true),
            redis: options.redis,
            registry: 'lucky-orange',
            replicas: options.replicas || 2,
            serviceAccount: options.serviceAccount || 'default',
            serviceType: options.serviceType || 'ClusterIP',
            servicePrefix: options.servicePrefix || '',
            timeout: options.timeout || 0,
            version: process.env.LO_BUILD_VERSION
          }
        }
      },
      {
        input: 'kubernetes.yaml',
        output: './dist/kubernetes/staging.yaml',
        data (options) {
          return {
            autoscale: false,
            auth: JSON.stringify(options.auth),
            cdn: false,
            googleApplicationCredentials: process.env.LO_GOOGLE_CREDENTIALS,
            livenessProbe: get(options, 'livenessProbe', true),
            luckyProject: 'lucky-orange-staging',
            memoryLimits: options.memoryLimits || '1Gi',
            name: getPodName(pkg, options.name),
            namespace: options.namespace || 'default',
            noIstio: options.noIstio,
            public: options.public === undefined ? true : options.public,
            readinessProbe: get(options, 'readinessProbe', true),
            redis: options.redis,
            registry: 'lucky-orange-staging',
            replicas: options.replicas || 1,
            serviceAccount: options.serviceAccount || 'default',
            serviceType: options.serviceType || 'ClusterIP',
            servicePrefix: options.servicePrefix || '',
            timeout: options.timeout || 0,
            version: process.env.LO_BUILD_VERSION
          }
        }
      }
    ]
  }
}

function getPodName (pkg, customName) {
  let name

  if (customName) {
    name = customName
  } else if (pkg.name.startsWith('@luckyorange/')) {
    name = pkg.name.substring(13, pkg.name.length)
  } else {
    name = pkg.name
  }

  return name
}
